@use 'sass:meta';
@use 'sass:list';
@use '~@sass-fairy/string/string';
@use '../core/utils/map';
@use 'utils' as *;

@function public-vars($tokens) {
  $label-text: map.get($tokens, 'label-text') or ();

  @return filter-nulls(
    (
      'container-width': map.get($tokens, 'container-width'),
      'container-height': map.get($tokens, 'container-height'),
      'container-color': map.get($tokens, 'container-color'),
      'icon-size': map.get($tokens, 'icon-size'),
      'icon-color': map.get($tokens, 'icon-color'),
      'label-text-color': map.get($tokens, 'label-text-color'),
      'label-text-size': map.get($label-text, 'font-size'),
      'label-text-name': map.get($label-text, 'font-name'),
      'label-text-weight': map.get($label-text, 'font-weight'),
      'label-text-line-height': map.get($label-text, 'line-height'),
      'direction': map.get($tokens, 'direction'),
    )
  );
}

@function private-vars($tokens) {
  $label-text: map.get($tokens, 'label-text') or ();

  @return filter-nulls(
    (
      'container-shape': map.get($tokens, 'container-shape'),
      'shadow-color': map.get($tokens, 'container-shadow-color'),
      'state-layer-color': map.get($tokens, 'state-layer-color'),
      'state-layer-opacity': map.get($tokens, 'state-layer-opacity'),
      'gap': map.get($tokens, 'icon-label-space'),
    )
  );
}

@function state-vars($state-map, $prefix, $exclusion-maps...) {
  $state-tokens: extend($state-map, $exclusion-maps...);
  $state-public-vars: append-public-prefix(public-vars($state-tokens), $prefix);
  $state-private-vars: private-vars($state-tokens);
  @return map.merge($state-public-vars, $state-private-vars);
}

@function -group-callback($key) {
  $groups: ();
  $remaining: $key;

  @if string.includes($remaining, 'focused-') {
    $groups: list.append($groups, 'focused');
    $remaining: string.replace($remaining, 'focused-', '');
  } @else if string.includes($remaining, 'hovered-') {
    $groups: list.append($groups, 'hovered');
    $remaining: string.replace($remaining, 'hovered-', '');
  } @else if string.includes($remaining, 'pressed-') {
    $groups: list.append($groups, 'pressed');
    $remaining: string.replace($remaining, 'pressed-', '');
  } @else {
    $groups: list.append($groups, 'default');
  }

  @return ($groups, $remaining);
}

@function group-fabs($map) {
  @return group($map, meta.get-function('-group-callback'));
}
