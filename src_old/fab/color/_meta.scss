@use 'sass:meta';
@use '../../core/tokens/md-comp-fab-primary';
@use '../../core/tokens/md-comp-fab-secondary';
@use '../../core/utils/map';
@use '../default/meta' as default;
@use '../utils' as *;
@use '../vars' as *;

$-colors: (
  'primary': md-comp-fab-primary.$map,
  'secondary': md-comp-fab-secondary.$map,
);

@function -map-color-tokens($color, $tokens, $-void...) {
  $groups: group-fabs($tokens);

  $default-tokens: map.get($groups, 'default');
  $special: (
    'state-layer-color': map.get($groups, 'pressed', 'state-layer-color'),
  );

  $extensions: (
    $default-tokens,
    $special,
    default.$default-tokens,
    default.$special-tokens,
    default.$hovered-tokens
  );

  @return (
    $color,
    (
      'default': map.merge(
          extend($default-tokens, default.$default-tokens),
          $special
        ),
      'hovered': extend(map.get($groups, 'hovered'), $extensions...),
      'focused': extend(map.get($groups, 'focused'), $extensions...),
      'pressed': extend(map.get($groups, 'pressed'), $extensions...)
    )
  );
}

@function -map-color-states($state, $tokens, $-map, $prefix) {
  @if $state == 'default' {
    $prefix: $prefix;
  } @else {
    $prefix: '#{$prefix}-#{$state}';
  }

  @return ($state, state-vars($tokens, $prefix));
}

@function -map-colors($color, $tokens, $-void...) {
  @return (
    $color,
    map.map($tokens, meta.get-function('-map-color-states'), 'md-#{$color}-fab')
  );
}

$color-tokens: map.map($-colors, meta.get-function('-map-color-tokens'));
$colors: map.map($color-tokens, meta.get-function('-map-colors'));
