@use 'sass:map';
@use 'sass:meta';
@use '../core/processor/token-vars';
@use '../core/processor/css-var';
@use '../core/utils/list';

$-public-vars: (
  'container-color',
  'container-elevation',
  'container-height',
  'icon-color',
  'icon-size',
  'label-text-color',
  'label-text',
  'leading-space',
  'trailing-space'
);

$-private-vars: (
  'container-shape-round',
  'container-shape-square',
  'container-shadow-color',
  'focus-indicator-color',
  'focus-indicator-outline-offset',
  'focus-indicator-thickness',
  'icon-label-space',
  'state-layer-opacity',
  'state-layer-color',
  'container-opacity',
  'label-text-opacity',
  'outline-color'
);

@function -transform-shape($acc, $key, $-void...) {
  $definition: map.get($acc, $key);
  $value: map.get($definition, 'value');

  @if $value == 'full' {
    @return map.set(
      $acc,
      css-var.set-value(
        $definition,
        calc(css-var.private('container-height') / 2)
      )
    );
  }

  @return $acc;
}

@function create-vars($tokens, $prefix) {
  $definitions: token-vars.create(
    $tokens,
    $prefix,
    $-public-vars,
    $-private-vars
  );

  @return list.reduce(
    map.keys($definitions),
    meta.get-function('-transform-shape'),
    $definitions
  );
}
