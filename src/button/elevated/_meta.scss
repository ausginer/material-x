@use 'sass:meta';
@use '../../core/tokens/md-comp-button-elevated';
@use '../../core/utils/map';
@use '../vars' as *;

$groups: group-buttons(md-comp-button-elevated.$map);

$default: map.merge(
  public-vars(map.get($groups, 'default'), 'md-button'),
  private-vars(map.get($groups, 'default'))
);

@function _vars-filter($key, $index, $map, $_...) {
  @return map.get($default, $key) != map.get($map, $key);
}

$filter-callback: meta.get-function('_vars-filter');

$_tokens: prepare-tokens(pick-unique(tokens.$values, default-tokens.$values));

$flavor: string.unquote('flavor="elevated"');

$_default: map.get($_tokens, 'default');
$_hovered: pick-unique(map.get($_tokens, 'hovered'), $_default);
$_focused: pick-unique(map.get($_tokens, 'focused'), $_default);
$_pressed: pick-unique(map.get($_tokens, 'pressed'), $_default);
$_disabled: pick-unique(map.get($_tokens, 'disabled'), $_default);
$_unselected: pick-unique(map.get($_tokens, 'unselected'), $_default);
$_selected: pick-unique(map.get($_tokens, 'selected'), $_default);

$private-vars: map.set($private-vars, 'level', 'container-elevated');

$default: collect-vars(
  $_default,
  $public,
  $private-vars,
  'md-button-elevated-default'
);

$hovered: collect-vars(
  $_hovered,
  $public,
  $private-vars,
  'md-button-elevated-hovered'
);

$focused: collect-vars(
  $_focused,
  $public,
  $private-vars,
  'md-button-elevated-focused'
);

$pressed: collect-vars(
  $_pressed,
  $public,
  $private-vars,
  'md-button-elevated-pressed'
);

$unselected: collect-vars(
  $_unselected,
  $public,
  $private-vars,
  'md-button-elevated-unselected'
);

$selected: collect-vars(
  $_selected,
  $public,
  $private-vars,
  'md-button-elevated-selected'
);
