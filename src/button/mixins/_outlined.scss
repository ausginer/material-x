@use '../../core/tokens/md-comp-button' as default-tokens;
@use '../../core/tokens/md-comp-button-outlined' as tokens;
@use '../../core/utils/functions' as funcs;
@use '../../core/utils/map';
@use '../utils' as *;

$default: funcs.pick-unique(tokens.$default, default-tokens.$default);
$hovered: funcs.pick-unique(tokens.$hovered, default-tokens.$hovered);
$focused: funcs.pick-unique(tokens.$focused, default-tokens.$focused);
$pressed: funcs.pick-unique(tokens.$pressed, default-tokens.$pressed);
$unselected: funcs.pick-unique(tokens.$unselected, default-tokens.$unselected);
$selected: funcs.pick-unique(tokens.$selected, default-tokens.$selected);

@mixin main {
  :host([flavor='outlined']) {
    @include tokens-as-private-vars($default);
    --_container-color: transparent;
    --_outline-width: 1px;

    border: var(--_outline-width) solid var(--_outline-color);
  }

  @if map.size($hovered) > 0 {
    :host([flavor='outlined']:hover) {
      @include tokens-as-private-vars($hovered);
    }
  }

  @if map.size($focused) > 0 {
    :host([flavor='outlined']:focus-visible) {
      @include tokens-as-private-vars($focused);
    }
  }

  @if map.size($pressed) > 0 {
    :host([flavor='outlined']:active) {
      @include tokens-as-private-vars($pressed);
    }
  }
}

@mixin switch {
  @if map.size($unselected) > 0 {
    :host([flavor='outlined']) {
      @include tokens-as-private-vars($unselected);
    }
  }

  @if map.size($unselected) > 0 {
    :host([flavor='outlined'][unchecked]) {
      @include tokens-as-private-vars($unselected);

      border: none;
    }
  }
}
