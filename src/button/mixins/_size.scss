@use '../../core/tokens/md-comp-button' as default-tokens;
@use '../../core/tokens/md-comp-button-xlarge' as xlarge-tokens;
@use '../../core/tokens/md-comp-button-large' as large-tokens;
@use '../../core/tokens/md-comp-button-medium' as medium-tokens;
@use '../../core/tokens/md-comp-button-small' as small-tokens;
@use '../../core/tokens/md-comp-button-xsmall' as xsmall-tokens;
@use '../../core/utils/functions' as funcs;
@use '../../core/utils/map';
@use '../utils' as *;

$sizes: ('xlarge': (
  default: xlarge-tokens.$default,
  pressed: xlarge-tokens.$pressed,
  selected: xlarge-tokens.$selected
), 'large': (
  default: large-tokens.$default,
  pressed: large-tokens.$pressed,
  selected: large-tokens.$selected
), 'medium': (
  default: medium-tokens.$default,
  pressed: medium-tokens.$pressed,
  selected: medium-tokens.$selected
), 'small': (
  default: small-tokens.$default,
  pressed: small-tokens.$pressed,
  selected: small-tokens.$selected
), 'xsmall': (
  default: xsmall-tokens.$default,
  pressed: xsmall-tokens.$pressed,
  selected: xsmall-tokens.$selected
));

@mixin main {
  @each $size, $sets in $sizes {
    $default: funcs.pick-unique(map.get($sets, default), default-tokens.$default);
    $pressed: funcs.pick-unique(map.get($sets, pressed), default-tokens.$pressed);

    :host([size='#{$size}']) {
      @include tokens-as-private-vars($default);
    }

    @if map.size($pressed) > 0 {
      :host([size='#{$size}']:active) {
        @include tokens-as-private-vars($pressed);
      }
    }
  }
}

@mixin switch {
  @each $size, $sets in $sizes {
    $selected: funcs.pick-unique(map.get($sets, selected), default-tokens.$selected);

    @if map.size($selected) > 0 {
      :host([size='#{$size}'][checked]) {
        @include tokens-as-private-vars($selected);
      }
    }
  }
}
