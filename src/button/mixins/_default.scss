@use 'sass:map';
@use 'sass:list';
@use '../../core/utils/functions' as funcs;
@use '../../core/tokens/md-comp-button' as tokens;
@use '../../core/tokens/md-sys-motion' as motion-tokens;
@use '../../core/defaults/motion-effects' as motion-effects;
@use '../utils' as *;

$hovered: funcs.pick-unique(tokens.$hovered, tokens.$default);
$focused: funcs.pick-unique(tokens.$focused, tokens.$default);
$pressed: funcs.pick-unique(tokens.$pressed, tokens.$default);
$disabled: funcs.pick-unique(tokens.$disabled, tokens.$default);
$unselected: funcs.pick-unique(tokens.$unselected, tokens.$default);
$selected: funcs.pick-unique(tokens.$selected, tokens.$default);

$default-exclusions: ('stiffness', 'damping', 'shape');
$other-exclusions: list.join($default-exclusions, ('state-layer'));

@mixin main {
  :host {
    @include tokens-as-private-vars(tokens.$default, $default-exclusions);

    --_container-shape-default: #{map.get(
        tokens.$default,
        container-shape-round
      )};
    --_container-shape-pressed: #{map.get(
        tokens.$default,
        container-shape-square
      )};
    --_motion-damping: #{map.get(
        tokens.$pressed,
        container-corner-size-motion-spring-damping
      )};
    --_motion-stiffness: #{map.get(
        tokens.$pressed,
        container-corner-size-motion-spring-stiffness
      )};
    --_motion-duration: #{motion-effects.$expressive-fast-effects-duration};
    --_token-shape-full: calc(var(--_container-height) / 2);
    --_spring-factor: 0;
    --_ripple-color: #{map.get(tokens.$pressed, state-layer-color)};
    --_ripple-easing: #{motion-effects.$expressive-fast-effects};
    --_ripple-opacity: #{map.get(tokens.$pressed, state-layer-opacity)};

    display: inline-flex;
    cursor: default;
    user-select: none;
    background-color: var(--_container-color);
    color: var(--_label-text-color);
    // prettier-ignore
    padding-block: calc((var(--_container-height) - max(var(--_icon-size), var(--_label-text-line-height))) / 2);
    padding-inline-start: var(--_leading-space);
    padding-inline-end: var(--_trailing-space);
    border-radius: calc(
      var(--_container-shape-default) -
        (var(--_container-shape-default) - var(--_container-shape-pressed)) *
        var(--_spring-factor)
    );
    font: var(--_label-text);
    place-items: center;
    place-content: center;
    position: relative;
    gap: 8px;
  }

  :host(:hover) {
    @include tokens-as-private-vars($hovered, $other-exclusions);
    $opacity: calc(var(--_state-layer-opacity) * 100%);
    background-color: color-mix(
        in srgb,
        var(--_container-color),
        var(--_state-layer-color) #{$opacity}
    );
  }

  :host(:focus-visible) {
    @include tokens-as-private-vars($focused, $other-exclusions);

    outline: var(--_focus-indicator-thickness) solid
      var(--_focus-indicator-color);
    outline-offset: var(--_focus-indicator-outline-offset);
  }

  :host(:active) {
    @include tokens-as-private-vars($pressed, $other-exclusions);
  }

  slot[name='icon'] {
    flex: 1 0 var(--_icon-size);
  }
}

@mixin disabled {
  :host([disabled]) {
    @include tokens-as-private-vars($disabled, $other-exclusions);

    $container-opacity-amount: calc(
      100% - var(--_disabled-container-opacity) * 100%
    );
    $label-text-opacity: calc(
      100% - var(--_disabled-label-text-opacity) * 100%
    );

    background-color: color-mix(
      in srgb,
      var(--_disabled-container-color),
      transparent #{$container-opacity-amount}
    );
    color: color-mix(
      in srgb,
      var(--_disabled-label-text-color),
      transparent #{$label-text-opacity}
    );
    cursor: default;
    pointer-events: none;
    outline: none;
  }
}

@mixin switch {
  :host {
    @include tokens-as-private-vars($unselected, $other-exclusions);
  }

  :host([checked]) {
    @include tokens-as-private-vars($selected, $other-exclusions);
  }
}
