@use 'sass:list';
@use 'sass:string';
@use '../core/utils/functions' as *;
@use '../core/utils/map';

$_button-states: ('default', 'disabled', 'hovered', 'focused', 'pressed');

@function append-host-params($params) {
  $result: ':host';

  @if list.length($params) > 0 {
    $result: '#{$result}(';

    @each $p in $params {
      @if string.index($p, ':') == 1 {
        $result: '#{$result}#{$p}';
      } @else {
        $result: '#{$result}[#{$p}]';
      }
    }

    $result: '#{$result})';
  }

  @return string.unquote($result);
}

@function host-state($state, $params...) {
  @if $state == 'disabled' {
    $params: list.append($params, 'disabled');
  } @else if $state == 'hovered' {
    $params: list.append($params, ':hover');
  } @else if $state == 'focused' {
    $params: list.append($params, ':focus-visible');
  } @else if $state == 'pressed' {
    $params: list.append($params, ':active');
  }

  @return append-host-params($params);
}

@function prepare-tokens($tokens) {
  $split-tokens: split-token-map(
    $tokens,
    list.join($_button-states, ('unselected', 'selected'))
  );

  $result: ();
  @each $state in $_button-states {
    $result: map.set($result, $state, map.get($split-tokens, $state));
  }

  $unselected-tokens: split-token-map(
    map.get($split-tokens, 'unselected'),
    $_button-states
  );
  $unselected-result: ();
  @each $state in $_button-states {
    $unselected-result: map.set(
      $unselected-result,
      $state,
      map.get($unselected-tokens, $state)
    );
  }
  $result: map.set($result, 'unselected', $unselected-result);

  $selected-tokens: split-token-map(
    map.get($split-tokens, 'selected'),
    $_button-states
  );

  $selected-result: ();
  @each $state in $_button-states {
    $selected-result: map.set(
      $selected-result,
      $state,
      map.get($selected-tokens, $state)
    );
  }

  $result: map.set($result, 'selected', $selected-result);

  @return $result;
}

@function collect-vars($map, $public-vars, $private-vars, $public-prefix) {
  $public-tokens: apply-tokens($map, $public-vars);
  @debug $public-tokens, $public-vars, $map;
  $private-tokens: apply-tokens($map, $private-vars);

  @return map.merge(
    make-public-vars($public-prefix, $public-tokens),
    $private-tokens
  );
}

@mixin state($vars, $state, $params...) {
  $host: host-state($state, $params...);

  @if map.size($vars) > 0 {
    #{$host} {
      @include vars($vars);
      @content;
    }
  }
}

@mixin default-state($vars, $params...) {
  @include state($vars, 'default', $params...) {
    @content;
  }
}

@mixin hovered-state($vars, $params...) {
  @include state($vars, 'hovered', $params...) {
    @content;
  }
}

@mixin focused-state($vars, $params...) {
  @include state($vars, 'focused', $params...) {
    @content;
  }
}

@mixin pressed-state($vars, $params...) {
  @include state($vars, 'pressed', $params...) {
    @content;
  }
}

@mixin disabled-state($vars, $params...) {
  @include state($vars, 'disabled', $params...) {
    @content;
  }
}

@mixin unselected-states($varsMap, $params...) {
  @each $state in $_button-states {
    $vars: map.get($varsMap, $state);

    @include state($vars, $state, $params...) {
      @content ($state);
    }
  }
}

@mixin selected-states($varsMap, $params...) {
  @each $state in $_button-states {
    $vars: map.get($varsMap, $state);

    @include state($vars, $state, $params...) {
      @content ($state);
    }
  }
}
