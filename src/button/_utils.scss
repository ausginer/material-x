@use 'sass:list';
@use 'sass:string';
@use '../core/utils/functions' as *;
@use '../core/tokens/md-comp-button' as button-tokens;
@use '../core/utils/map';

@function empty($map) {
  @return map.size($map) == 0;
}

@function exclude($tokens, $manual-options: ()) {
  $result: $tokens;
  @each $key, $value in $tokens {
    @each $option in $manual-options {
      @if string.index($key, $option) != null {
        $result: map.remove($result, $key);
      }
    }
  }

  @return $result;
}

$_button-states: ('default', 'disabled', 'hovered', 'focused', 'pressed');

@function append-host-params($params) {
  $result: ':host';

  @if list.length($params) > 0 {
    $result: '#{$result}(';

    @each $p in $params {
      @if string.index($p, ':') == 1 {
        $result: '#{$result}#{$p}';
      } @else {
        $result: '#{$result}[#{$p}]';
      }
    }

    $result: '#{$result})';
  }

  @return string.unquote($result);
}

@function host-state($state, $params...) {
  @if $state == 'disabled' {
    $params: list.append($params, 'disabled');
  } @else if $state == 'hovered' {
    $params: list.append($params, ':hover');
  } @else if $state == 'focused' {
    $params: list.append($params, ':focus-visible');
  } @else if $state == 'pressed' {
    $params: list.append($params, ':active');
  }

  @return append-host-params($params);
}

@function prepare-tokens($tokens) {
  $split-tokens: split-token-map(
    $tokens,
    list.join($_button-states, ('unselected', 'selected'))
  );

  $result: ();
  @each $state in $_button-states {
    $result: map.set(
      $result,
      $state,
      map.get($split-tokens, $state)
    );
  }

  $unselected-tokens: split-token-map(
    map.get($split-tokens, 'unselected'),
    $_button-states
  );
  $unselected-result: ();
  @each $state in $_button-states {
    $unselected-result: map.set(
      $unselected-result,
      $state,
      map.get($unselected-tokens, $state)
    );
  }
  $result: map.set($result, 'unselected', $unselected-result);

  $selected-tokens: split-token-map(
    map.get($split-tokens, 'selected'),
    $_button-states
  );

  $selected-result: ();
  @each $state in $_button-states {
    $selected-result: map.set(
      $selected-result,
      $state,
      map.get($selected-tokens, $state)
    );
  }

  $result: map.set($result, 'selected', $selected-result);

  @return $result;
}

@mixin private-vars($tokens, $state: null) {
  @each $key, $value in $tokens {
    @if $state != null {
      --_#{$key}: var(--md-button-#{$state}-#{$key}, #{$value});
    } @else {
      --_#{$key}: var(--md-button-#{$key}, #{$value});
    }
  }
}

@mixin states($tokens, $states, $params...) {
  @each $state in $states {
    $map: $tokens;

    @if map.has-key($tokens, $state) {
      $map: map.get($tokens, $state);
    }

    $host: host-state($state, $params...);

    @if map.size($map) > 0 {
      #{$host} {
        @include private-vars($map, $state);
        @content ($state);
      }
    }
  }
}

@mixin default-state($tokens, $params...) {
  @include states($tokens, ('default'), $params...) using ($state) {
    @content;
  }
}

@mixin hovered-state($tokens, $params...) {
  @include states($tokens, ('hovered'), $params...) using ($state) {
    @content;
  }
}

@mixin focused-state($tokens, $params...) {
  @include states($tokens, ('focused'), $params...) using ($state) {
    @content;
  }
}

@mixin pressed-state($tokens, $params...) {
  @include states($tokens, ('pressed'), $params...) using ($state) {
    @content;
  }
}

@mixin disabled-state($tokens, $params...) {
  @include states($tokens, ('disabled'), $params..., 'disabled') using ($state) {
    @content;
  }
}

@mixin unselected-states($tokens, $params...) {
  @include states($tokens, $_button-states, $params...) using ($state) {
    @content ($state);
  }
}

@mixin selected-states($tokens, $params...) {
  @include states($tokens, $_button-states, $params..., checked) using ($state) {
    @content ($state);
  }
}
