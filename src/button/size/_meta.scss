@use 'sass:meta';
@use '../../core/tokens/md-comp-button' as default-tokens;
@use '../../core/tokens/md-comp-button-xlarge' as xlarge-tokens;
@use '../../core/tokens/md-comp-button-large' as large-tokens;
@use '../../core/tokens/md-comp-button-medium' as medium-tokens;
@use '../../core/tokens/md-comp-button-small' as small-tokens;
@use '../../core/tokens/md-comp-button-xsmall' as xsmall-tokens;
@use '../../core/utils/map';
@use '../default/meta' as default;
@use '../utils' as *;
@use '../vars' as *;

@function _unique-variables-filter-default($key, $value, $_...) {
  @return $value != map.get(default.$default, $key);
}
$default-filter-callback: meta.get-function('_unique-variables-filter-default');

@function _unique-variables-filter($key, $value, $map, $default-map) {
  @return $value != map.get($default-map, $key) and $value !=
    map.get(default.$default, $key);
}
$filter-callback: meta.get-function('_unique-variables-filter');

@function _process-sizes($key, $value, $_...) {
  $groups: group-buttons($value);

  $default: map.filter(
    map.merge(
      public-vars(map.get($groups, 'default'), 'md-#{$key}-button'),
      private-vars(map.get($groups, 'default'))
    ),
    $default-filter-callback
  );

  @return (
    'default': $default,
    'hovered': state-vars(
        map.get($groups, 'hovered') or (),
        'md-#{$key}-button-hovered',
        $filter-callback,
        $default
      ),
    'focused': state-vars(
        map.get($groups, 'focused') or (),
        'md-#{$key}-button-focused',
        $filter-callback,
        $default
      ),
    'pressed': state-vars(
        map.get($groups, 'pressed') or (),
        'md-#{$key}-button-pressed',
        $filter-callback,
        $default
      ),
    'unselected': special-state-vars(
        map.get($groups, 'unselected') or (),
        'md-#{$key}-button-unselected',
        $filter-callback,
        $default
      ),
    'selected': special-state-vars(
        map.get($groups, 'selected') or (),
        'md-#{$key}-button-selected',
        $filter-callback,
        $default
      )
  );
}

$sizes: map.map(
  (
    'xlarge': xlarge-tokens.$map,
    'large': large-tokens.$map,
    'medium': medium-tokens.$map,
    'small': small-tokens.$map,
    'xsmall': xsmall-tokens.$map,
  ),
  meta.get-function('_process-sizes')
);
