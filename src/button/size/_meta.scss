@use 'sass:meta';
@use '../../core/tokens/md-comp-button' as default-tokens;
@use '../../core/tokens/md-comp-button-xlarge' as xlarge-tokens;
@use '../../core/tokens/md-comp-button-large' as large-tokens;
@use '../../core/tokens/md-comp-button-medium' as medium-tokens;
@use '../../core/tokens/md-comp-button-small' as small-tokens;
@use '../../core/tokens/md-comp-button-xsmall' as xsmall-tokens;
@use '../../core/utils/map';
@use '../../core/utils/functions' as *;
@use '../default/meta' as default;
@use '../utils' as *;
@use '../vars' as *;

@function -map-multi-state-vars($key, $value, $-map, $default...) {
  @return ($key, pick-unique($value, $default, default.$default));
}
$-map-multi-state-vars: meta.get-function('-map-multi-state-vars');

@function -process-sizes($key, $value, $-void...) {
  $groups: group-buttons($value);

  $default: pick-unique(map.get($groups, 'default'), default.$default);

  @return (
    $key,
    (
      'default': $default,
      'hovered': pick-unique(
          map.get($groups, 'hovered') or (),
          $default,
          default.$default
        ),
      'focused': pick-unique(
          map.get($groups, 'focused') or (),
          $default,
          default.$default
        ),
      'pressed': pick-unique(
          map.get($groups, 'pressed') or (),
          $default,
          default.$default
        ),
      'unselected': map.map(
          map.get($groups, 'unselected') or (),
          $-map-multi-state-vars
        ),
      'selected': map.map(
          map.get($groups, 'selected') or (),
          $-map-multi-state-vars
        )
    )
  );
}

$sizes: map.map(
  (
    'xlarge': xlarge-tokens.$map,
    'large': large-tokens.$map,
    'medium': medium-tokens.$map,
    'small': small-tokens.$map,
    'xsmall': xsmall-tokens.$map,
  ),
  meta.get-function('-process-sizes')
);
