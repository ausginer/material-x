@use 'sass:meta';
@use '~@sass-fairy/list/list';
@use '~@sass-fairy/string/string';
@use '../core/tokens/md-comp-button';
@use '../core/utils/map';
@use '../core/processor/css-var';
@use 'utils' as *;

$public-vars: (
  'container-color',
  'container-elevation',
  'container-height',
  'icon-color',
  'icon-size',
  'label-text-color',
  'label-text',
  'leading-space',
  'trailing-space'
);

$private-vars: (
  'container-shape-round',
  'container-shape-square',
  'container-shadow-color',
  'focus-indicator-color',
  'focus-indicator-outline-offset',
  'focus-indicator-thickness',
  'icon-label-space',
  'state-layer-opacity',
  'state-layer-color',
  'container-opacity',
  'label-text-opacity',
  'outline-color'
);

@function transform-shape($var) {
  @if $var == 'full' {
    @return calc(css-var.private('container-height') / 2);
  }

  @return $var;
}

/// A callback to be used with {@link set.vars} to process variables for
/// buttons.
///
/// @param {String} $key - The name of the variable.
/// @param {*} $value - The value of the variable.
/// @param {Map} $-map - The full map of tokens (not used).
/// @param {Function} $to-public-var-callback - A function to convert a public
/// variable to a CSS variable reference.
/// @param {String} $prefix - The prefix to use for the public CSS variable.
/// @returns {VarTuple|Map|Null} - A {@link VarTuple}, a map of {@link VarTuple}
/// or `null` to skip the variable.
@function process-vars($key, $value, $-map, $to-public-var-callback, $prefix) {
  @if list.includes($public-vars, $key) {
    @if $key == 'label-text' {
      $result: (
        'label-text-font': map.get($value, 'font-name'),
        'label-text-size': map.get($value, 'font-size'),
        'label-text-weight': map.get($value, 'font-weight'),
        'label-text-line-height': map.get($value, 'line-height'),
      );

      @return map.map($result, $to-public-var-callback, $prefix);
    }

    @return meta.call($to-public-var-callback, $key, $value, $prefix);
  }

  @if (list.includes($private-vars, $key)) {
    @if string.includes($key, 'container-shape') {
      @return ($key, transform-shape($value));
    }

    @return ($key, $value);
  }

  @return null;
}
$process-vars: meta.get-function('-process-vars');

@function -map-public-vars($key, $value, $map, $prefix) {
  @return ($key, 'var(--#{$prefix}-#{$key}, #{$value})');
}

@function -map-corner-shape($key, $value, $-void...) {
  @if string.includes($key, 'shape') and $value == full {
    @return ($key, calc(var(--_container-height) / 2));
  }

  @return ($key, $value);
}

@function public-vars($tokens) {
  $label-text: map.get($tokens, 'label-text') or ();

  @return filter-nulls(
    (
      'container-color': map.get($tokens, 'container-color'),
      'container-elevation': map.get($tokens, 'container-elevation'),
      'container-height': map.get($tokens, 'container-height'),
      'icon-color': map.get($tokens, 'icon-color'),
      'icon-size': map.get($tokens, 'icon-size'),
      'label-text-color': map.get($tokens, 'label-text-color'),
      'label-text-font': map.get($label-text, 'font-name'),
      'label-text-size': map.get($label-text, 'font-size'),
      'label-text-weight': map.get($label-text, 'font-weight'),
      'label-text-line-height': map.get($label-text, 'line-height'),
      'leading-space': map.get($tokens, 'leading-space'),
      'trailing-space': map.get($tokens, 'trailing-space'),
    )
  );
}

@function private-vars($tokens) {
  $label-text: map.get($tokens, 'label-text') or ();

  @return filter-nulls(
    (
      'container-shape-round': shape-transformer(
          map.get($tokens, 'container-shape-round')
        ),
      'container-shape-square': shape-transformer(
          map.get($tokens, 'container-shape-square')
        ),
      'container-shadow-color': map.get($tokens, 'container-shadow-color'),
      'focus-indicator-color': map.get($tokens, 'focus-indicator-color'),
      'focus-indicator-outline-offset': map.get(
          $tokens,
          'focus-indicator-outline-offset'
        ),
      'focus-indicator-thickness': map.get($tokens, 'focus-indicator-thickness'),
      'icon-label-space': map.get($tokens, 'icon-label-space'),
      'state-layer-opacity': map.get($tokens, 'state-layer-opacity'),
      'state-layer-color': map.get($tokens, 'state-layer-color'),
      'container-opacity': map.get($tokens, 'container-opacity'),
      'label-text-opacity': map.get($tokens, 'label-text-opacity'),
      'outline-color': map.get($tokens, 'outline-color'),
    )
  );
}

@function state-vars($state-tokens, $prefix) {
  $state-public-vars: append-public-prefix(public-vars($state-tokens), $prefix);
  $state-private-vars: private-vars($state-tokens);
  @return map.merge($state-public-vars, $state-private-vars);
}

@function -group-callback($key) {
  $groups: ();
  $remaining: $key;

  // Level 1: Selection state
  @if string.includes($remaining, 'unselected-') {
    $groups: list.append($groups, 'unselected');
    $remaining: string.replace($remaining, 'unselected-', '');
  } @else if string.includes($remaining, 'selected-') {
    $groups: list.append($groups, 'selected');
    $remaining: string.replace($remaining, 'selected-', '');
  }

  // Level 2: Interaction state
  @if string.includes($remaining, 'focused-') {
    $groups: list.append($groups, 'focused');
    $remaining: string.replace($remaining, 'focused-', '');
  } @else if string.includes($remaining, 'hovered-') {
    $groups: list.append($groups, 'hovered');
    $remaining: string.replace($remaining, 'hovered-', '');
  } @else if string.includes($remaining, 'pressed-') {
    $groups: list.append($groups, 'pressed');
    $remaining: string.replace($remaining, 'pressed-', '');
  } @else if string.includes($remaining, 'disabled-') {
    $groups: list.append($groups, 'disabled');
    $remaining: string.replace($remaining, 'disabled-', '');
  } @else {
    $groups: list.append($groups, 'default');
  }

  @return ($groups, $remaining);
}
$group-callback: meta.get-function('-group-callback');

@function group-buttons($map) {
  @return group($map, meta.get-function('-group-callback'));
}
