@use 'sass:meta';
@use 'sass:list';
@use '~@sass-fairy/string/string';
@use '../core/tokens/md-comp-button';
@use '../core/utils/group' as *;
@use '../core/utils/map';

@function -filter-null-values($key, $value, $-void...) {
  @return $value != null;
}

$-filter-null-values: meta.get-function('-filter-null-values');

@function -map-public-vars($key, $value, $map, $prefix) {
  @return ($key, 'var(--#{$prefix}-#{$key}, #{$value})');
}

@function -map-corner-shape($key, $value, $-void...) {
  @if string.includes($key, 'shape') and $value == full {
    @return ($key, calc(var(--_container-height) / 2));
  }

  @return ($key, $value);
}

@function public-vars($tokens, $prefix, $additional-map: ()) {
  $label-text: map.get($tokens, 'label-text') or ();
  $base: map.merge(
    (
      'container-color': map.get($tokens, 'container-color'),
      'container-elevation': map.get($tokens, 'container-elevation'),
      'container-height': map.get($tokens, 'container-height'),
      'icon-color': map.get($tokens, 'icon-color'),
      'icon-size': map.get($tokens, 'icon-size'),
      'label-text-color': map.get($tokens, 'label-text-color'),
      'label-text-font': map.get($label-text, 'font-name'),
      'label-text-size': map.get($label-text, 'font-size'),
      'label-text-weight': map.get($label-text, 'font-weight'),
      'label-text-line-height': map.get($label-text, 'line-height'),
      'leading-space': map.get($tokens, 'leading-space'),
      'trailing-space': map.get($tokens, 'trailing-space'),
    ),
    $additional-map
  );

  @return map.map(
    map.map(
      map.filter($base, $-filter-null-values),
      meta.get-function('-map-public-vars'),
      $prefix
    ),
    meta.get-function('-map-corner-shape')
  );
}

@function private-vars($tokens, $additional-map: ()) {
  $base: map.merge(
    (
      'container-shape-round': map.get($tokens, 'container-shape-round'),
      'container-shape-square': map.get($tokens, 'container-shape-square'),
      'container-shadow-color': map.get($tokens, 'container-shadow-color'),
      'focus-indicator-color': map.get($tokens, 'focus-indicator-color'),
      'focus-indicator-outline-offset': map.get(
          $tokens,
          'focus-indicator-outline-offset'
        ),
      'focus-indicator-thickness': map.get($tokens, 'focus-indicator-thickness'),
      'icon-label-space': map.get($tokens, 'icon-label-space'),
      'state-layer-opacity': map.get($tokens, 'state-layer-opacity'),
      'state-layer-color': map.get($tokens, 'state-layer-color'),
      'container-opacity': map.get($tokens, 'container-opacity'),
      'label-text-opacity': map.get($tokens, 'label-text-opacity'),
      'outline-color': map.get($tokens, 'outline-color'),
    ),
    $additional-map
  );

  @return map.map(
    map.filter($base, $-filter-null-values),
    meta.get-function('-map-corner-shape')
  );
}

@function -group-callback($key) {
  $groups: ();
  $remaining: $key;

  // Level 1: Selection state
  @if string.includes($remaining, 'unselected-') {
    $groups: list.append($groups, 'unselected');
    $remaining: string.replace($remaining, 'unselected-', '');
  } @else if string.includes($remaining, 'selected-') {
    $groups: list.append($groups, 'selected');
    $remaining: string.replace($remaining, 'selected-', '');
  }

  // Level 2: Interaction state
  @if string.includes($remaining, 'focused-') {
    $groups: list.append($groups, 'focused');
    $remaining: string.replace($remaining, 'focused-', '');
  } @else if string.includes($remaining, 'hovered-') {
    $groups: list.append($groups, 'hovered');
    $remaining: string.replace($remaining, 'hovered-', '');
  } @else if string.includes($remaining, 'pressed-') {
    $groups: list.append($groups, 'pressed');
    $remaining: string.replace($remaining, 'pressed-', '');
  } @else if string.includes($remaining, 'disabled-') {
    $groups: list.append($groups, 'disabled');
    $remaining: string.replace($remaining, 'disabled-', '');
  } @else {
    $groups: list.append($groups, 'default');
  }

  @return ($groups, $remaining);
}

@function group-buttons($map) {
  @return group($map, meta.get-function('-group-callback'));
}
