@use 'sass:meta';
@use '../../core/tokens/md-comp-button';
@use '../../core/defaults/motion-effects';
@use '../../core/utils/map';
@use '../../core/utils/functions' as *;
@use '../utils' as *;
@use '../vars' as *;

$-groups: group-buttons(md-comp-button.$map);

$default: map.merge(
  map.get($-groups, 'default'),
  (
    'container-shape-default': var(--_container-shape-round),
    'container-shape-pressed': var(--_container-shape-square),
    'state-layer-opacity': map.get($-groups, 'pressed', 'state-layer-opacity'),
    'state-layer-color': map.get($-groups, 'pressed', 'state-layer-color'),
    'padding-block': calc(
        (
            var(--_container-height) - max(
                var(--_icon-size),
                var(--_label-text-line-height)
              )
          ) /
          2
      ),
    'motion-damping': map.get(
        $-groups,
        'pressed',
        'container-corner-size-motion-spring-damping'
      ),
    'motion-stiffness': map.get(
        $-groups,
        'pressed',
        'container-corner-size-motion-spring-stiffness'
      ),
    'motion-duration': motion-effects.$expressive-fast-effects-duration,
    'ripple-color': map.get($-groups, 'pressed', 'state-layer-color'),
    'ripple-easing': motion-effects.$expressive-fast-effects,
    'ripple-opacity': map.get($-groups, 'pressed', 'state-layer-opacity'),
    'spring-factor': 0,
  )
);

$hovered: pick-unique(map.get($-groups, 'hovered'), $default);

$focused: pick-unique(map.get($-groups, 'focused'), $default);

$pressed: pick-unique(map.get($-groups, 'pressed'), $default);

$disabled: pick-unique(map.get($-groups, 'disabled'), $default);

@function -map-special-state-vars($key, $value, $-void...) {
  @return ($key, pick-unique($value, $default));
}
$-map-special-state-vars-callback: meta.get-function('-map-special-state-vars');

$unselected: map.map(
  map.get($-groups, 'unselected') or (),
  $-map-special-state-vars-callback
);

$selected: map.map(
  map.get($-groups, 'selected') or (),
  $-map-special-state-vars-callback
);
