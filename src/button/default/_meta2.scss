@use 'sass:map';
@use '../../core/defaults/motion-effects';
@use '../../core/processor/set';
@use '../../core/processor/groups';
@use '../../core/processor/css-var';
@use '../../core/tokens/md-comp-button';
@use '../core/utils/map';
@use '../shape/meta2' as *;
@use '../buttons';

$-groups: groups.from(md-comp-button.$map, $group-callback);

/// A map of specific variables that are not explicitly set by the M3 spec, but
/// are necessary for the button to function correctly. Usually, all these
/// variables are private.
///
/// @type TokenSet
$-special-tokens: map.merge(
  $round-tokens,
  (
    'state-layer-opacity': map.get($-groups, 'pressed', 'state-layer-opacity'),
    'state-layer-color': map.get($-groups, 'pressed', 'state-layer-color'),
    'padding-block': calc(
        (
            var(--_container-height) - max(
                var(--_icon-size),
                var(--_label-text-line-height)
              )
          ) /
          2
      ),
    'press-damping': map.get(
        $-groups,
        'pressed',
        'container-corner-size-motion-spring-damping'
      ),
    'press-stiffness': map.get(
        $-groups,
        'pressed',
        'container-corner-size-motion-spring-stiffness'
      ),
    'press-duration': motion-effects.$expressive-fast-effects-duration,
    'ripple-color': var(--_state-layer-color),
    'ripple-easing': motion-effects.$expressive-fast-effects,
    'ripple-opacity': var(--_state-layer-opacity),
    'press-factor': 0,
  )
);

/// A reducer function to convert groups into sets.
///
/// @param {Map<String, TokenSet | Map<String, TokenSet>>} $acc - The
/// accumulator map.
/// @param {String} $key - The name of the group.
/// @param {Number} $-index - The index of the current key (not used).
/// @param {List<String>} $-list - The full list of keys (not used).
/// @param {Map<String, Map<String, Any>>} $groups - The full map of groups.
/// @param {Map<String, Any>} $special-vars - A map of custom variables to merge
/// into the default set.
/// @returns {TokenSet | Map<String, TokenSet>} - The created token set or a map
/// of token sets for complex groups.
@function -build-set-from-group(
  $acc,
  $key,
  $-index,
  $-list,
  $groups,
  $special-vars: ()
) {
  $group: map.get($groups, $key);

  // If the group is `selected` or `unselected`, it is a complex group that
  // contains multiple states. In that case, we convert each state from this
  // group to a set separately.
  @if ($key == 'unselected' or $key == 'selected') {
    @return map.set(
      $acc,
      $key,
      list.reduce(
        map.keys($group),
        meta.get-function('-build-set-from-group'),
        (),
        $group
      )
    );
  }

  // If the group is `default`, we don't have a base to extend from, so we just
  // merge the custom variables in.
  @if ($key == 'default') {
    @return map.set($acc, $key, map.merge($group, $special-vars));
  }

  // For all other groups, we extend from the `default` set.
  @return set.extend($group, map.get($groups, 'default'));
}

/// A map of all token sets for buttons. Variables are not yet processed (no
/// public/private distinction).
///
/// This map is necessary for further references for other types of buttons.
///
/// @type Map<String, TokenSet | Map<String, TokenSet>>
$sets: list.reduce(
  map.keys($-groups),
  meta.get-function('-build-set-from-group'),
  (),
  $-groups,
  $-special-tokens
);

/// A reducer function to create variable packs for each set.
///
/// @param {Map<String, Map<String, Any>>} $acc - The accumulator map.
/// @param {String} $key - The name of the set.
/// @param {Number} $-index - The index of the current key (not used).
/// @param {List<String>} $-list - The full list of keys (not used).
/// @param {Map<String, TokenSet | Map<String, TokenSet>>} $map - The full map
/// of sets.
/// @param {String|null} $parent-key - The name of the parent set if this is a
/// subset (for `selected` and `unselected`), otherwise `null`.
/// @returns {Map<String, Map<String, Any>>} - The created map of variable
/// packs.
@function -build-var-pack(
  $acc,
  $key,
  $-index,
  $-list,
  $map,
  $parent-key: null
) {
  // The `selected` and `unselected` sets are complex and contain multiple
  // states. We need to process each state of them separately.
  @if ($key == 'selected' or $key == 'unselected') {
    $submap: map.get($map, $key);

    @return map.set(
      $acc,
      $key,
      list.reduce(
        map.keys($submap),
        meta.get-function('-build-var-pack'),
        (),
        $submap,
        $key
      )
    );
  }

  $set: map.get($submap, $key);

  @return map.set(
    $acc,
    $key,
    buttons.create-vars(
      $set,
      if(
        $key == 'default',
        'md-button',
        'md-button-#{if($parent-key != null, '#{$parent-key}-#{$key}', $key)}'
      )
    )
  );
}

$-var-packs: list.reduce(
  map.keys($sets),
  meta.get-function('-build-var-pack'),
  (),
  $sets
);

$default: map.get($-prepared-sets, 'default');
$hovered: map.get($-prepared-sets, 'hovered');
$focused: map.get($-prepared-sets, 'focused');
$pressed: map.get($-prepared-sets, 'pressed');
$disabled: map.get($-prepared-sets, 'disabled');

$unselected: map.get($-prepared-sets, 'unselected');
$selected: map.get($-prepared-sets, 'selected');
