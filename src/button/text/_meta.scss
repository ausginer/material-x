@use 'sass:meta';
@use 'sass:string';
@use '../../core/tokens/md-comp-button-text';
@use '../../core/utils/map';
@use '../default/meta' as default;
@use '../utils' as *;
@use '../vars' as *;

$color: 'text';

$groups: group-buttons(md-comp-button-text.$map);

@function _unique-variables-filter-default($key, $value, $_...) {
  @return $value != map.get(default.$default, $key);
}

$default: map.filter(
  map.merge(
    public-vars(map.get($groups, 'default'), 'md-#{$color}-button'),
    private-vars(
      map.get($groups, 'default'),
      (
        'container-color': transparent,
      )
    )
  ),
  meta.get-function('_unique-variables-filter-default')
);

@function _unique-variables-filter($key, $value, $_...) {
  @return $value != map.get($default, $key) and $value !=
    map.get(default.$default, $key);
}

$filter-callback: meta.get-function('_unique-variables-filter');

$hovered: state-vars(
  map.get($groups, 'hovered'),
  'md-#{$color}-button-hovered',
  $filter-callback
);
$focused: state-vars(
  map.get($groups, 'focused'),
  'md-#{$color}-button-focused',
  $filter-callback
);
$pressed: state-vars(
  map.get($groups, 'pressed'),
  'md-#{$color}-button-pressed',
  $filter-callback
);

$unselected: special-state-vars(
  map.get($groups, 'unselected') or (),
  'md-#{$color}-button-unselected',
  $filter-callback
);

$selected: special-state-vars(
  map.get($groups, 'selected') or (),
  'md-#{$color}-button-selected',
  $filter-callback
);
