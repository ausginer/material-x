@use 'sass:meta';
@use 'sass:string';
@use '../../core/tokens/md-comp-button-text';
@use '../../core/utils/map';
@use '../default/meta' as default;
@use '../utils' as *;
@use '../vars' as *;

$color: 'text';

$-groups: group-buttons(md-comp-button-text.$map);

$default-tokens: map.get($-groups, 'default');
$special: (
  'container-color': transparent,
);

$default: map.merge(
  state-vars(
    extend(map.get($-groups, 'default'), default.$default-tokens),
    'md-#{$color}-button'
  ),
  $special
);

$-extensions: ($default-tokens, $special, default.$default-tokens);

$hovered: state-vars(
  extend(map.get($-groups, 'hovered'), $-extensions...),
  'md-#{$color}-button-hovered'
);

$focused: state-vars(
  extend(map.get($-groups, 'focused'), $-extensions...),
  'md-#{$color}-button-focused'
);

$pressed: state-vars(
  extend(map.get($-groups, 'pressed'), $-extensions...),
  'md-#{$color}-button-pressed'
);

@function -map-unselected($key, $value, $-void...) {
  @return (
    $key,
    state-vars(
      extend($value, $-extensions...),
      'md-#{$color}-button-unselected-#{$key}'
    )
  );
}

$unselected: map.map(
  map.get($-groups, 'unselected') or (),
  meta.get-function('-map-unselected')
);

@function -map-selected($key, $value, $-void...) {
  @return (
    $key,
    state-vars(
      extend($value, map.get($unselected, $key) or ()),
      'md-#{$color}-button-selected-#{$key}'
    )
  );
}

$selected: map.map(
  map.get($-groups, 'selected') or (),
  meta.get-function('-map-selected')
);
