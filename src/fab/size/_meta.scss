@use 'sass:meta';
@use '../../core/tokens/md-comp-fab-large';
@use '../../core/tokens/md-comp-fab-medium';
@use '../../core/utils/map';
@use '../default/meta' as default;
@use '../utils' as *;
@use '../vars' as *;

$-sizes: (
  'large': md-comp-fab-large.$map,
  'medium': md-comp-fab-medium.$map,
);

@function -map-size-tokens($size, $tokens, $-void...) {
  $-groups: group-fabs($tokens);

  $default-tokens: map.get($-groups, 'default');

  $-extensions: (
    $default-tokens,
    default.$default-tokens,
    default.$special-tokens,
    default.$hovered-tokens
  );

  @return (
    $size,
    (
      'default': extend($default-tokens, default.$default-tokens),
      'hovered': extend(map.get($-groups, 'hovered'), $-extensions...),
      'focused': extend(map.get($-groups, 'focused'), $-extensions...),
      'pressed': extend(map.get($-groups, 'pressed'), $-extensions...)
    )
  );
}

@function -map-size-states($state, $tokens, $-map, $prefix) {
  @if $state == 'default' {
    $prefix: $prefix;
  } @else {
    $prefix: '#{$prefix}-#{$state}';
  }

  @return ($state, state-vars($tokens, $prefix));
}

@function -map-sizes($size, $tokens, $-void...) {
  @return (
    $size,
    map.map($tokens, meta.get-function('-map-size-states'), 'md-#{$size}-fab')
  );
}

$size-tokens: map.map($-sizes, meta.get-function('-map-size-tokens'));
$sizes: map.map($size-tokens, meta.get-function('-map-sizes'));
