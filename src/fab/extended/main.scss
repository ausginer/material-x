@use 'sass:map';
@use '~@sass-fairy/list/list';
@use '../utils' as *;
@use 'meta' as *;

@mixin states($tokens, $params...) {
  $params: list.prepend($params, 'extended');

  @include default-state(map.get($tokens, 'default'), $params...) {
    @content ('default');
  }
  @include hovered-state(map.get($tokens, 'hovered'), $params...) {
    @content ('hovered');
  }
  @include focused-state(map.get($tokens, 'focused'), $params...) {
    @content ('focused');
  }
  @include pressed-state(map.get($tokens, 'pressed'), $params...) {
    @content ('pressed');
  }
}

@include states(map.get($extended-default, 'default')) using ($state) {
  @if $state == 'default' {
    color: var(--_label-text-color);
    line-height: var(--_label-text-line-height);
    font-family: var(--_label-text-name);
    font-weight: var(--_label-text-weight);
    gap: calc(var(--_gap) * var(--_unfold-factor));
    flex-direction: var(--_direction);
    cursor: default;
    user-select: none;

    slot:not([name='icon']) {
      display: block;
      white-space: nowrap;
      font-size: calc(var(--_label-text-size) * var(--_unfold-factor));

      @supports (width: calc-size(min-content, size)) {
        font-size: var(--_label-text-size);
        max-width: calc-size(min-content, size * var(--_unfold-factor));
        overflow: hidden;
      }
    }
  }
}

@include states(map.get($extended-default, 'tonal'), 'tonal') using ($state) {
}

@each $size, $tokens in $extended-sizes {
  @if $size != 'default' {
    $size-param: size($size);
    @include states($tokens, $size-param) using ($state) {
    }
  }
}

@each $color, $tokens in $extended-colors {
  @if $color != 'default' {
    $color-param: color($color);
    @include states($tokens, $color-param) using ($state) {
    }
  }
}

@each $color, $tokens in $extended-tonal {
  @if $color != 'default' {
    $color-param: color($color);
    @include states($tokens, 'tonal', $color-param) using ($state) {
    }
  }
}
