@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use '~@sass-fairy/list/list';
@use 'var-reference';

/// Design Token Set.
/// @type Map<String, Any>
$TokenSet: (
  'token-a': 'Any',
);

@function -is-unique(
  $extension,
  $-index,
  $-list,
  $original-key,
  $original-value
) {
  @return $original-value != map.get($extension, $original-key);
}
$-is-unique: meta.get-function('-is-unique');

/// Asserts that the provided map is a valid `TokenSet`.
///
/// @param {Any} $value - The value to check.
/// @returns {TokenSet} - The same value if the check passes.
@function -assert-token-set($value) {
  @if meta.type-of($value) != 'map' {
    @error 'Expected a TokenSet.';
  }

  @return $value;
}

/// Produces a new token map where values inherited from one or more `bases`
/// maps are removed. This is used when a token set extends other sets: values
/// that are identical to any base's value are treated as inherited and
/// omitted from the result so the extending set contains only the values that
/// differ (the overrides).
///
/// NOTE: Designed to use in conjunction with `set.create()`.
///
/// @param {Map<String, TokenSet>} $map the primary map of tokens to filter (the
/// extending set).
/// @param {List<Map<String, TokenSet>>} $bases a list of base maps whose values
/// represent inherited defaults to be removed from `$map`.
/// @returns {Map<String, TokenSet>} - The filtered map with only unique values
///
/// @example
///   $set: create(
///     extends(
///       md-comp-outlined-button.$map,
///       $default-button-tokens,
///     ),
///   );
@function extend($tokens, $bases...) {
  $result: ();

  @each $key, $value in $tokens {
    @if list.every($bases, $-is-unique, $key, $value) {
      $result: map.set($result, $key, $value);
    }
  }

  @return $result;
}
