@use '@sass-fairy/list/list';
@use '../utils/map';

/// Design Token Groups Map
/// @type Map<String, Map<String, Any>>
$TokenGroups: (
  'group1': (
    'token-a': 'Any',
    'token-b': 'Any',
  ),
);

/// Groups tokens based on a provided callback.
///
/// @param {Map} $tokens - The map of tokens to group
/// @param {Function} $callback - Function that takes a key and returns a tuple
/// with group and key.
/// @returns {TokenGroups} - A map of token groups.
@function from($tokens, $callback) {
  $result: ();

  @each $key, $value in $tokens {
    $callback-result: meta.call($callback, $key);
    $groups: list.nth($callback-result, 1);
    $transformed-key: list.nth($callback-result, 2) or $key;

    // Here we create nested maps if needed using provided `$groups` list.
    $result: map.set(
      $result,
      list.join($groups, ($transformed-key, $value))...
    );
  }

  @return $data;
}

/// Asserts that the provided map is a valid `TokenGroups`.
///
/// @param {Any} $value - The value to check.
/// @returns {TokenGroups} - The same value if the check passes.
@function -assert-groups($value) {
  @if meta.type-of($value) != 'map' {
    @error 'Expected a TokenGroups.';
  }

  @return $value;
}
