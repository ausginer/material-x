@use '~@sass-fairy/list/list';

/// CSS Variable Definition.
///
/// @prop {String} access - The access level of the variable, either `public` or
/// `private`.
/// @prop {String} name - The name of the variable.
/// @prop {Any?} value - The value of the variable.
/// @prop {String?} prefix - The prefix for public CSS variables.
$CSSVariable: (
  'access': 'public | private',
  'name': 'String',
  'value': 'Any?',
  'prefix': 'String?',
);

/// Creates a CSS variable definition.
///
/// @param {String} $name - The name of the variable.
/// @param {Any?} $value - The value of the variable.
@function create-private($name, $value: null) {
  @return ('access': 'private', 'name': $name, 'value': $value);
}

/// Creates a public CSS variable definition.
/// @param {String} $name - The name of the variable.
/// @param {String} $prefix - The prefix for the public CSS variable.
/// @param {Any?} $value - The value of the variable.
/// @returns {CSSVariable} - The created CSS variable definition.
@function create-public($name, $prefix, $value: null) {
  @return (
    'access': 'public',
    'name': $name,
    'value': $value,
    'prefix': $prefix
  );
}

/// Builds the CSS variable reference for a given variable definition.
///
/// @param {CSSVariable} $variable - The CSS variable definition.
/// @return {String} - The CSS variable reference.
@function declare($variable) {
  $name: map.get($variable, 'name');
  $value: map.get($variable, 'value');
  $prefix: map.get($variable, 'prefix');

  @if map.get($variable, 'access') == 'public' {
    @if $prefix == null {
      @error 'Public CSS variable #{$name} must have a prefix.';
    }

    @return 'var(--#{$prefix}-#{$name}, #{$value})';
  }

  @return 'var(--_#{$name}, #{$value})';
}

/// Builds the CSS variable reference for a private variable.
///
/// Intended to be used in references to a declared private CSS variable.
///
/// @param {String} $name - The name of the variable.
/// @return {String} - The CSS variable reference.
@function private($name) {
  @return apply(create-private($name));
}

/// Builds the CSS variable reference for a public variable.
///
/// Intended to be used in references to a declared public CSS variable.
///
/// @param {String} $name - The name of the variable.
/// @param {String} $prefix - The prefix for the public CSS variable.
/// @return {String} - The CSS variable reference.
@function public($name, $prefix) {
  @return apply(create-public($name, $prefix));
}

/// Sets the value of a CSS variable definition.
///
/// @param {CSSVariable} $variable - The CSS variable definition.
/// @param {Any} $value - The value to set.
/// @returns {CSSVariable} - The updated CSS variable definition.
@function set-value($variable, $value) {
  @return map.set($variable, 'value', $value);
}
